Summary of Pruning & Bubblewrap Integration:

    Initial Pruning Logic:

        Started with a full, writable‐bind setup (w for all child dirs).

        Iteratively tested each directory: hide (n=tmpfs) → read‐only (r) → writable (w).

        Recursively pruned only subtrees that remained non-hidden.

    Command‐Ordering Bug:

        build_bwrap_command() needed to sort binds by path depth so parent binds didn’t override child tmpfs.

        Fixed by sorting depth:mode:path tuples via sort -k1,1 -k2,2.

    Errexit Silent Failures:

        The awk test in collapse_parent_if_most_children_bound() (exit 1 triggers set -e exit).

        Wrapped the test in if …; then unset …; fi to prevent script termination.

    Assignment/Test Directories Hidden:

        The pruner never saw accesses under assignment or test, so it marked them n and tmpfs‐mounted them.

        Solution: Introduced --assignment-dir/--test-dir flags and “force‐ro‐bind” seeding in the config before pruning (or re‐applying after).

    Per‐Subpath Override Issue:

        Binding only the parent (assignment) but then tmpfs‐hiding children nullified the parent bind.

        Solution: Skip pruning under those roots entirely (or re‐apply recursive r seeding post‐prune).

    Missing Gradle Wrapper Components:

        With a warm Gradle cache during pruning, JCE policy and wrapper downloads weren’t exercised.

        Pruner hid /conf/security/policy, causing JCE SSL failures on fresh runs.

        Solution:

            One‐time “cold prune” with empty cache to detect all runtime‐touched paths, persist results.

            Or use a generic --force-ro-bind hook (parsed into FORCE_RO[]) to whitelist JCE policy folder.

    Over‐pruning System Libraries:

        The pruner blindly hid /usr/lib after the “golden” build didn’t touch it, leading to silent NO-SOURCE successes.

        Solution:

            Added a --skip-pattern mechanism so operators can specify globs (e.g. /usr/lib/*) to never prune.

            Ensured system dirs aren’t tmpfs‐mounted by default without hardcoding.

    NO-SOURCE as Success Trap:

        Gradle’s NO-SOURCE tasks exit zero but indicate a build misconfiguration for pruning.

        Solution: Introduced two pattern lists:

            IGNORABLE_FAILURE_PATTERNS (test‐failure messages treated as success)

            UNIGNORABLE_SUCCESS_PATTERNS (compile‐NO-SOURCE treated as failure)

        Ensured we return the correct exit codes in test_build_script() for accurate pruning decisions.

Key Academic Takeaways:

    Language‐agnostic pruning relies on observational inference of filesystem access patterns; it necessitates a small, declarative whitelist for runtime‐specific resources (e.g., JCE policies, Gradle wrapper).

    Mount‐ordering semantics in Linux (bind vs. tmpfs) require careful depth‐based sorting to prevent parent mounts from clobbering child overlays.

    Robust automation demands handling the full spectrum of build outcomes—success, test failures, and “no work” cases—with pattern-driven exit‐code remapping.

    Two‐phase pruning (cold vs. hot) balances completeness (capturing dynamic paths on a warm cache) with performance (fast incremental runs using forced‐bind seeds).

These measures, when combined, yield a minimal, secure sandbox that preserves academic honesty (via tmpfs for build artifacts) while ensuring reliable, reproducible evaluation across diverse language toolchains.


1. Bottom-Up (“Build-As-You-Go”) Approach

How it works

    Start with no mounts under your target.

    As you observe each file or directory the build actually touches, add a bind (r or w) for that specific path.

    Recursively repeat: whenever the build fails for lack of access, grant just enough permissions to make it succeed.

Pros

    Minimal binds: you only ever mount exactly what was proven necessary.

    Fine-grained control: every leaf node gets its own mount.

Cons

    Many iterations: each new path discovered triggers another test run.

    High latency: file-by-file or directory-by-directory grants can mean hundreds of build restarts.

    Complex logic: you need to track which exact descendant triggered each failure.



2. Top-Down (“Prune-By-Hiding”) Approach

How it works

    Start with everything writable under the target.

    Iteratively hide (tmpfs) large subtrees: if hiding /foo doesn’t break the build, leave it hidden.

    Where hiding does break things, fall back to read-only, then writable, and recurse into only the “required” subdirectories.

Pros

    Fewer test runs: you can skip entire branches in one go by tmpfs-hiding them.

    Logarithmic-style pruning: collapsing large unused subtrees in a handful of probes.

    Simple recursion: you only recurse into subtrees that truly matter.

Cons

    Coarser granularity: you may temporarily hide many small paths at once and then have to backtrack.

    Risk of over-pruning: hiding a parent can mask child needs unless you sort and override correctly.

    Need for depth-aware sorting: parents must be tested before children to avoid mount conflicts


Skipping Whole Directories with tmpfs

A key advantage of top-down is that you can skip an entire directory tree in one step:

--tmpfs /opt/unneeded-module

This single mount hides thousands of files at once, whereas a bottom-up approach would need to discover and bind each folder or file individually.




When to Use Which

    Bottom-up makes sense if your build only touches a very small set of known files (e.g. a tiny script) and you want millisecond-precise minimality.

    Top-down is almost always faster for real-world builds, because large portions of a project (e.g. docs, generated caches, examples) can be hidden in one shot.

In practice, the top-down pruning with strategic skip-patterns or forced-bind seeds gives you a scalable, language-agnostic sandbox that converges in tens of runs rather than hundreds or thousands—while still ensuring that only the truly required paths remain exposed.